// File is autogenerated with `dub spasm:webidl -- --bindgen`
import {spasm as spa, encoders as encoder, decoders as decoder} from '../modules/spasm.js';
let spasm = spa;
const setBool = (ptr, val) => (spasm.heapi32u[ptr/4] = +val),
      setInt = (ptr, val) => (spasm.heapi32s[ptr/4] = val),
      setUInt = (ptr, val) => (spasm.heapi32u[ptr/4] = val),
      setShort = (ptr, val) => (spasm.heapi16s[ptr/2] = val),
      setUShort = (ptr, val) => (spasm.heapi16u[ptr/2] = val),
      setByte = (ptr, val) => (spasm.heapi8s[ptr] = val),
      setUByte = (ptr, val) => (spasm.heapi8u[ptr] = val),
      setFloat = (ptr, val) => (spasm.heapf32[ptr/4] = val),
      setDouble = (ptr, val) => (spasm.heapf64[ptr/8] = val),
      getBool = (ptr) => spasm.heapi32u[ptr/4],
      getInt = (ptr) => spasm.heapi32s[ptr/4],
      getUInt = (ptr) => spasm.heapi32u[ptr/4],
      getShort = (ptr) => spasm.heapi16s[ptr/2],
      getUShort = (ptr) => spasm.heapi16u[ptr/2],
      getByte = (ptr) => spasm.heapi8s[ptr],
      getUByte = (ptr) => spasm.heapi8u[ptr],
      getFloat = (ptr) => spasm.heapf32[ptr/4],
      getDouble = (ptr) => spasm.heapf64[ptr/8],
      isDefined = (val) => (val != undefined && val != null),
      encode_handle = (ptr, val) => { setUInt(ptr, spasm.addObject(val)); },
      decode_handle = (ptr) => { return spasm.objects[getUInt(ptr)]; },
      spasm_encode_string = encoder.string,
      spasm_decode_string = decoder.string,
      spasm_indirect_function_get = (ptr)=>spasm.instance.exports.__indirect_function_table.get(ptr),
  spasm_encode_Handle = encode_handle,
  spasm_encode_optional_Handle = (ptr, val)=>{
    if (setBool(ptr+4, isDefined(val))) {
      spasm_encode_Handle(ptr, val);
    }
  };
export let jsExports = {
  DOMTokenList_add: (ctx, tokensLen, tokensPtr) => {
    spasm.objects[ctx].add(spasm_decode_string(tokensLen, tokensPtr));
  },
  Document_createElement_0: (ctx, localNameLen, localNamePtr) => {
    return spasm.addObject(spasm.objects[ctx].createElement(spasm_decode_string(localNameLen, localNamePtr)));
  },
  Document_body_Get: (rawResult, ctx) => {
    spasm_encode_optional_Handle(rawResult, spasm.objects[ctx].body);
  },
  Element_classList_Get: (ctx) => {
    return spasm.addObject(spasm.objects[ctx].classList);
  },
  Element_innerHTML_Set: (ctx, innerHTMLLen, innerHTMLPtr) => {
    spasm.objects[ctx].innerHTML = spasm_decode_string(innerHTMLLen, innerHTMLPtr);
  },
  Node_appendChild: (ctx, node) => {
    return spasm.addObject(spasm.objects[ctx].appendChild(spasm.objects[node]));
  },
  HTMLOrSVGElement_focus_0: (ctx) => {
    spasm.objects[ctx].focus();
  },
}